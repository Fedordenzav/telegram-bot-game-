import random
import time
import threading
from telebot import TeleBot

bot = TeleBot('7733062260:AAEUhtZt2I-okyVefvyYMl7xvzgMTh4qyQ0')
data = ["–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ", "—Å—Ç–µ–∫–ª–æ", "–º—É—Å–æ—Ä", "–∑–∞–≤–æ–¥", "–≤—ã—Ö–ª–æ–ø", "–≤—ã–±—Ä–æ—Å—ã", "—Ö–∏–º–∏—è", "–Ω–µ—Ñ—Ç—å", "–≥–∞–∑—ã", "–∫–ª–∏–º–∞—Ç", "–ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ", "—É–≥–ª–µ—Ä–æ–¥", "—Ñ–∞–∫—Ç–æ—Ä", "—É—â–µ—Ä–±", "–æ–≥–æ–Ω—å", "–ø–ª–∞–º—è", "–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ", "–ø–æ—á–≤–∞", "–≤–æ–∑–¥—É—Ö", "–¥–∏–æ–∫—Å–∏–¥", "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ"]

registered_users = {}  
user_scores = {}  
current_word = {}  
timer_thread = {}  

def shuffle_word(word):
    word_list = list(word)
    random.shuffle(word_list)
    return ''.join(word_list)

def start_timer(chat_id):
    time.sleep(45)  
    if chat_id in current_word:  
        user_scores[chat_id] -= 2  
        bot.send_message(chat_id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –£ –≤–∞—Å –æ—Ç–Ω—è–ª–∏ 2 –æ—á–∫–∞. –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ...")
        send_new_word(chat_id)

def send_new_word(chat_id):
    if data:  
        word = random.choice(data)
        shuffled = shuffle_word(word)
        current_word[chat_id] = word
        bot.send_message(chat_id, f"{registered_users[chat_id]}, —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ: {shuffled}")
        timer_thread[chat_id] = threading.Thread(target=start_timer, args=(chat_id,))
        timer_thread[chat_id].start()  
    else:
        bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! üéâ")

@bot.message_handler(commands=['start'])
def start_message(message):
    if message.chat.id not in registered_users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return
    user_scores[message.chat.id] = 10
    send_new_word(message.chat.id)

@bot.message_handler(commands=['help'])
def help_message(message):
    help_text = (
        "–Ø –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç! –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö\n"
        "/github - –ú–æ–π GitHub\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ\n"
        "/exit - –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º, –∏ —è —Å–∫–∞–∂—É, –ø—Ä–∞–≤—ã –ª–∏ –≤—ã!"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['github'])
def github_message(message):
    git_text = (
        "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–π GitHub: https://github.com/Fedordenzav "
    )
    bot.send_message(message.chat.id, git_text)

@bot.message_handler(commands=['register'])
def register_user(message):
    if message.chat.id in registered_users:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, process_name)

def process_name(message):
    name = message.text
    registered_users[message.chat.id] = name
    user_scores[message.chat.id] = 10  
    bot.send_message(message.chat.id, f"{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

@bot.message_handler(commands=['exit'])
def exit_game(message):
    if message.chat.id in registered_users:
        name = registered_users[message.chat.id]
        score = user_scores[message.chat.id]
        
        
        if message.chat.id in current_word:
            del current_word[message.chat.id]  
        if message.chat.id in timer_thread:
            
            timer_thread[message.chat.id].join()  
            del timer_thread[message.chat.id] 

        bot.send_message(message.chat.id, f"{name}, –≤—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –í–∞—à–∏ –æ—á–∫–∏: {score}.")
        help_message(message)  
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")

@bot.message_handler(func=lambda message: True)
def check_word(message):
    if message.chat.id not in registered_users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return
    global data
    original_word = current_word.get(message.chat.id)
    if original_word and message.text == original_word:
        user_scores[message.chat.id] += 3 
        data.remove(original_word)  
        bot.send_message(message.chat.id, f"–ú–æ–ª–æ–¥–µ—Ü, {registered_users[message.chat.id]}!üòÅ –£ –≤–∞—Å {user_scores[message.chat.id]} –æ—á–∫–æ–≤.")
        send_new_word(message.chat.id)  
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ(üòï –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

try:
    bot.polling(none_stop=True)
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")